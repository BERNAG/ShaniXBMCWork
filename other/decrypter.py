import math

class decrypter:
	def __init__(self, param1, param2):


		_loc3_ = False;
		_loc4_ = True;
         	self.Rcon = [1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145];
		self.SBox = [99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22];
		self.SBoxInverse = [82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125];
		self.keySize = param1;
		self.blockSize = param2;
		self.roundsArray = [0,0,0,0,[0,0,0,0,10,0,12,0,14],0,[0,0,0,0,12,0,12,0,14],0,[0,0,0,0,14,0,14,0,14]];
		self.shiftOffsets = [0,0,0,0,[0,1,2,3],0,[0,1,2,3],0,[0,1,3,4]];
		self.Nb = param2 / 32;
		self.Nk = param1 / 32;
		self.Nr = self.roundsArray[self.Nk][self.Nb];

	def decrypt(self,param1, param2, param3):
		_loc11_ = True;
		_loc12_ = False;
		_loc10_ = None;
		_loc4_ = []
		_loc5_ = []
		_loc6_ = self.hexToChars(param1);#==48 characters


		_loc7_ = self.blockSize / 8;
		##print self.strToChars(param2)
		##print 'hexToChars',_loc6_, 'count is ',len(_loc6_);
		_lo8st=self.strToChars(param2);
		##print 'strToChars',_lo8st, 'count is ',len(_lo8st);

		_loc8_ = self.keyExpansion(_lo8st);

		##print 'keyExpansion 8', _loc8_, ' len is ', len(_loc8_);
		#return 1/0
		_loc9_ = (len(_loc6_) / _loc7_)-1;
		#print 'loc 9 is ',_loc9_
		while	_loc9_ > 0:
		#	#print _loc9_ * _loc7_,(_loc9_ + 1) * _loc7_
			_loc5_ = self.decryption(_loc6_[_loc9_ * _loc7_:(_loc9_ + 1) * _loc7_],_loc8_);
			#print '16 portion',_loc5_

			_loc4_=_loc5_+(_loc4_)



			_loc9_-=1;

		#print 'now string',_loc4_, 'count is ',len(_loc4_);

		#if(param3 == 'ECB'):
		##print _loc6_[0:int(_loc7_)]

		#now add last stage here
		_loc44= self.decryption(_loc6_[0:int(_loc7_)],_loc8_)
		#print 'last 16bit',_loc44,' Count is ', len(_loc44)
		_loc4_ =_loc44+_loc4_;

		#print 'NOW _loc4_ string',_loc4_, 'count is ',len(_loc4_);



		_loc4_= self.charsToStr(_loc4_);

		_loop_=0;
		_patternArray=[];
		_finalString= "http://allmyvideos.net/9b7ccumgfrui";
		#while( _loop_<len(_finalString)):
		#	_patternArray.append(ord(_finalString[_loop_]) - ord(_loc4_[_loop_]));
		#	_loop_+=1;
		##print 'Pattern is ',_patternArray
		#
		#__Pattern =   [-16, 54, 78, 13, 16, -152, 40, -121, 48, 36, -88, 33, 97, 45, -58,-128, 41, -41, -22, -58, -97, 24, -164, -64, 97, -169, -69, -46, -126, -55, 19,14, 79, 53, -11]

		_loop_=0
		#_loc4_=list(_loc4_);
		#while( _loop_<len(__Pattern)):
		#	#print chr( ord(_loc4_[_loop_]) + __Pattern[_loop_]);
		#	_loc4_[_loop_]= chr( ord(_loc4_[_loop_]) + __Pattern[_loop_]);
		#	_loop_+=1;
		#_loc4_="".join(_loc4_)


		return _loc4_;   


	def MyInt(self,x):
		x = 0xffffffff & x
		if x > 0x7fffffff :
			return - ( ~(x - 1) & 0xffffffff )
		else : return x   

	def keyExpansion(self,param1):
		_loc5_ = True;
		_loc6_ = False;
		_loc4_ = None;
		_loc2_ = 0;
		self.Nk = self.keySize / 32;# =6, what if this was 5
		self.Nb = self.blockSize / 32;
		_loc3_ = [];
		self.Nr = self.roundsArray[self.Nk][self.Nb];# ==12, what if this was 10?
		_loc4_ = 0;
		##print 'Key param1 is',param1
		#print self.Nr,1,self.Nb, self.Nk
		_loc3_=[0]*(self.Nb * (self.Nr + 1))
		#param1=param1+[0,0,0,0]


		##print len(_loc3_);
		##print _loc3_
		while _loc4_ < self.Nk:
			(p1,p2,p3,p4)=(0,0,0,0)
			try:
				p1=param1[4 * _loc4_] 
				p2=param1[4 * _loc4_ + 1] << 8 
				p3=param1[4 * _loc4_ + 2] << 16 
				p4=param1[4 * _loc4_ + 3] << 24;
			except: pass
			_loc3_[_loc4_] = p1|p2|p3|p4
			_loc4_+=1;

         
		_loc4_ = self.Nk;
		while _loc4_ < self.Nb * (self.Nr + 1):
			_loc2_ = _loc3_[_loc4_-1];

#			#print 'val for loc4',_loc4_, _loc2_
			if(_loc4_ % self.Nk == 0):
				_loc2_ = (self.SBox[_loc2_ >> 8 & 255] | self.SBox[_loc2_ >> 16 & 255] << 8 | self.SBox[_loc2_ >> 24 & 255] << 16 | self.SBox[_loc2_ & 255] << 24) ^ self.Rcon[int(math.floor(_loc4_ / self.Nk))-1];
			else:
				if(self.Nk > 6 and _loc4_ % self.Nk == 4):
					_loc2_ = self.SBox[_loc2_ >> 24 & 255] << 24 | self.SBox[_loc2_ >> 16 & 255] << 16 | self.SBox[_loc2_ >> 8 & 255] << 8 | self.SBox[_loc2_ & 255];

			_loc3_[_loc4_] = self.MyInt(_loc3_[_loc4_ - self.Nk] ^ _loc2_)
			_loc4_+=1;

		return _loc3_;


      

      

	def hexToChars(self,param1):

 		_loc4_ = False;
		_loc5_ = True;
		_loc2_ = []
		_loc3_ =0;
		if param1[0:1] == '0x':
			_loc3_ =2;

		while _loc3_ < len(param1):
		#	#print param1[_loc3_:_loc3_+2]
			_loc2_.append(int(param1[_loc3_:_loc3_+2],16));
			_loc3_ = _loc3_ + 2;

		return _loc2_;

	def strToChars(self,param1):
		_loc4_ = True;
		_loc5_ = False;
		_loc2_ = []
		_loc3_ = 0;
		##print 'p1 is',param1,' and len is ', len(param1)
		while(_loc3_ < len(param1)):
		#	#print param1[_loc3_]
			_loc2_.append(ord(param1[_loc3_]));
			_loc3_+=1;

		return _loc2_;

	def charsToStr(self,param1):
		_loc4_ = False;
		_loc5_ = True;
		_loc2_ = ''
		_loc3_ = 0;
		while(_loc3_ < len(param1)):
			_loc2_ = _loc2_ + chr(param1[_loc3_]);
            		_loc3_+=1;
		return _loc2_;

	def packBytes(self,param1):
		_loc4_ = False;
		_loc5_ = True;
		_loc2_ = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
#		_loc2_[0] = []
#		_loc2_[1] = []
#		_loc2_[2] = []
#		_loc2_[3] = [];
		_loc3_ = 0;
		##print len(param1)
		while(_loc3_ < len(param1)):
			_loc2_[0][_loc3_ / 4] = param1[_loc3_];
			_loc2_[1][_loc3_ / 4] = param1[_loc3_ + 1];
			_loc2_[2][_loc3_ / 4] = param1[_loc3_ + 2];
			_loc2_[3][_loc3_ / 4] = param1[_loc3_ + 3];
			_loc3_ = _loc3_ + 4;
		return _loc2_;

      
	def unpackBytes(self,param1):
		_loc4_= False;
		_loc5_ = True;
		_loc2_ = []
		_loc3_ = 0;
		#print 'unpackBytesval is is ',param1

		while(_loc3_ < len(param1[0])):
			_loc2_.append( param1[0][_loc3_]);
			_loc2_.append(param1[1][_loc3_]);
			_loc2_.append(param1[2][_loc3_]);
			_loc2_.append(param1[3][_loc3_]);
			_loc3_+=1;
		return _loc2_;
      
      
	def InverseRound(self,param1, param2):
		_loc3_ = False;
		_loc4_ = True;
		#print 'Ircound is',param1,param2
		self.addRoundKey(param1,param2);
		#print 'Ircound back is',param1,param2
		self.mixColumn(param1,'decrypt');
		self.shiftRow(param1,'decrypt');
		self.byteSub(param1,'decrypt');
    
	def FinalRound(self,param1, param2):
		_loc3_ = False;
		_loc4_ = True;
		self.byteSub(param1,'encrypt');
		self.shiftRow(param1,'encrypt');
		self.addRoundKey(param1,param2);
      
      
	def InverseFinalRound(self,param1, param2):
		_loc3_ = False;
		_loc4_ = True;

		self.addRoundKey(param1,param2);

		self.shiftRow(param1,'decrypt');

		##print 'InverseFinalRound  byteSubbefore',param1
		self.byteSub(param1,'decrypt');
		##print 'InverseFinalRound byteSub after',param1


      
	def addRoundKey(self,param1, param2):
		_loc4_ = True;
		_loc5_ = False;
		_loc3_ = 0;
		#print 'addRoundKeys is', param1,param2
		while(_loc3_ < self.Nb):
			#print param1[0][_loc3_] , param2[_loc3_] & 255;
			param1[0][_loc3_] = self.MyInt(param1[0][_loc3_] ^ (param2[_loc3_] & 255));
			param1[1][_loc3_] = param1[1][_loc3_] ^ param2[_loc3_] >> 8 & 255;
			param1[2][_loc3_] = param1[2][_loc3_] ^ param2[_loc3_] >> 16 & 255;
			param1[3][_loc3_] = param1[3][_loc3_] ^ param2[_loc3_] >> 24 & 255;
                  	_loc3_+=1;
               
      
	def shiftRow(self,param1, param2):
		_loc4_ = True;
		_loc5_ = False;
		_loc3_ = 1;
		##print'#print p1 is ',param1,'p2 is ', param2

		while(_loc3_ < 4):
               
			if(param2 == 'encrypt'):
				param1[_loc3_] = self.cyclicShiftLeft(param1[_loc3_],self.shiftOffsets[self.Nb][_loc3_]);
			else:

				##print 'self nb is,',self.Nb,'offsets are' ,self.Nb- self.shiftOffsets[self.Nb][_loc3_]

				param1[_loc3_] = self.cyclicShiftLeft(param1[_loc3_],self.Nb - self.shiftOffsets[self.Nb][_loc3_]);
                  
			_loc3_+=1;
		##print'aaa#print p1 is ',param1,'p2 is ', param2

	def cyclicShiftLeft(self,param1, param2):
		_loc4_ = False;
		_loc5_ = True;
		_loc3_ = param1[0:param2];

		##print 'loc3 is'
		##print _loc3_
		##print 'param1 is'
		##print param1

		param1=param1[param2:];


		param1.extend(_loc3_);
		#print ' cyclicShiftLeft val is', param1

		return param1;
      
 	def decryption(self,param1, param2):
		_loc4_ = True;
		_loc5_ = False;
		#print param1

		param1 = self.packBytes(param1);


         	self.InverseFinalRound(param1,param2[self.Nb * self.Nr:]);# nb*nr=42
    	

        	##print param1

		_loc3_ = self.Nr-1;
		while(_loc3_ > 0):
			self.InverseRound(param1,param2[(self.Nb * _loc3_):self.Nb * (_loc3_ + 1)]);


			_loc3_-=1;
         
         	#print 'addRoundKey', param1,param2
		self.addRoundKey(param1,param2);
		reVal=self.unpackBytes(param1);
		#print ' decryption reVal',param1, reVal
		return reVal;
      
	def byteSub(self,param1, param2):
		_loc6_ = False;
		_loc7_ = True;
		_loc3_ = 0;
		_loc5_ = 0;
		if(param2 == 'encrypt'):
			_loc3_ = self.SBox;
		else:
			_loc3_ = self.SBoxInverse;
         
		_loc4_ = 0;

		while(_loc4_ < 4):
			_loc5_ = 0;
			##print _loc4_
			while(_loc5_ < self.Nb):
				##print 'param1 is'
				##print param1
				##print 'loc3 is'
				##print _loc3_
				##print '5 is ' +str(_loc5_)
				param1[_loc4_][_loc5_] = _loc3_[param1[_loc4_][_loc5_]];
				_loc5_+=1;
			_loc4_+=1;
         




 	def mixColumn(self,param1, param2):
		_loc6_ = False;
		_loc7_ = True;
		_loc4_ = 0;
		_loc3_ = [0,0,0,0];
		_loc5_ = 0;
		#print 'mixColumn is',param1, param2
		while(_loc5_ < self.Nb):
			_loc4_ = 0;
			while(_loc4_ < 4):

				if(param2 == "encrypt"):
					_loc3_[_loc4_] = self.mult_GF256(param1[_loc4_][_loc5_],2) ^ self.mult_GF256(param1[(_loc4_ + 1) % 4][_loc5_],3) ^ param1[(_loc4_ + 2) % 4][_loc5_] ^ param1[(_loc4_ + 3) % 4][_loc5_];
				else:					
					_loc3_[_loc4_] = self.mult_GF256(param1[_loc4_][_loc5_],14) ^ self.mult_GF256(param1[(_loc4_ + 1) % 4][_loc5_],11) ^ self.mult_GF256(param1[(_loc4_ + 2) % 4][_loc5_],13) ^ self.mult_GF256(param1[(_loc4_ + 3) % 4][_loc5_],9);
				_loc4_+=1;

			_loc4_ = 0;
			while(_loc4_ < 4):
				param1[_loc4_][_loc5_] = _loc3_[_loc4_];
				_loc4_+=1;
            
			_loc5_+=1;
         
	def xtime(self,param1):
		_loc2_ = False;
		_loc3_ = True;
	#	#print 'ppp1 is',param1;
		param1 = param1 << 1;
		if param1 & 256:
			return param1 ^ 283
		else:
			return param1;


	def mult_GF256(self,param1, param2):
		_loc5_ = True;
		_loc6_ = False;
		_loc3_ = 0;
		_loc4_ = 1;
		#print 'mult_GF256 is',param1,'p2 is',param2

		while(_loc4_ < 256):
			if(param1 & _loc4_):
				_loc3_ = _loc3_ ^ param2;
			_loc4_ = _loc4_ * 2;
			param2 = self.xtime(param2);
			##print 'xtime P2 is',param2
		#print 'mult_GF256',_loc3_    
		return _loc3_;
      

def hexToChars(param1):

 	_loc4_ = False;
	_loc5_ = True;
	_loc2_ = []
	_loc3_ =0;
	if param1[0:1] == '0x':
		_loc3_ =2;

	while _loc3_ < len(param1):
		#print int(param1[_loc3_:_loc3_+1],16)
		_loc2_.append(int(param1[_loc3_:_loc3_+1],16));
		_loc3_ = _loc3_ + 2;

	return "".join(_loc2_);      

def arrNametoString(param1):
	_loc4_ = True;
	_loc5_ = False;
	_loc2_ = "";
	param1.reverse();
	_loc3_ = 0;
	while(_loc3_ < len(param1)):
		_loc2_ = _loc2_ + chr(param1[_loc3_]);
		_loc3_+=1;
	return _loc2_;
      
#df236814880713e784e099b26a27569fb9891e1e1a5a32a56df1a33b5a68373014ed2e4a02be5bdb415663799435e606
#df236814880713e784e099b26a27569fb9891e1e1a5a32a56df1a33b5a68373014ed2e4a02be5bdb415663799435e606
s= decrypter(192,128);
#print s.decrypt('5db00a5b83a1e3fa8247a89567084197b1d8862935fc1acbddc1b73be6c0a9d61d996ad4ddcc2077b74093bd175081dc','mniqJTqBU8Z3KQUejSoM','ECB').split('\0')[0]
#print s.decrypt('29f2c81239ac3b6bae4fa1c11da4b31c005d22c07cb369567d5c2436d123b1043f333d26e3cef39f0b84d3ec69c07826aee6b05adc574938076639561026a43a456c9485212fd4ae7283845972fb5342f2eb41e901d0c82a4a5a4305e2236ed1378903eab75d40fd34a1a058ac52b01cdaef67973bbd443ea3472610ed47b6c5','u3332bcCRs2DvUf17rqq','ECB').split('\0')[0]

#print s.decrypt('1d985f278f6bc064677be20a1455b78caf8630b9dd0224f7c1236268d682968516c9c8b16e6dec20d5a78807d2409f986d2cde804db2baae80271de7c3917f3e6ca761eeb55f0ebcc10997f1622ec6b8b92970328a3366afff8a4234174acc4c07a7c6e59e88d4a01f614add9c83c3de50188e326073ec8999d2128362ee2ddc3c03348e6a2bc7968d4bd85320133c06e9535ebafe8670d94b21a3b499c33e9cfe46297749e14fc3f6bfe76813762692aa988a77d2f218ab6b86d51586f0e5647a35f660b20168abdee8e45b71c5e2a5aead8815424a4ce0946a5ebb392bbe2d15963ba35ec7035dfa7c5dd1609df67afa440a54ba4ce0bdf41242e258368067a428ea0d8b834e163ada91349eb9788b19b12b580c79141e63dab9b52d435b17da0f7c4b8e4fbc1243bfb3fdf5d13805f548ed6e44ef0cc747cbfc38251341bcd82cdc0d7e1b73c8898aa656dee8525191c392581fb68e94dbee19e5465d7b1bd3278fd200a7e4ac06f6c5dcadb4eccaac06766994a76cd2883cdafb31173c438346122615cf0dc0ec25449478ad021a7c62997f1a9ebd42e0a0d4cdc066dc91a1284d746d63523a7bbcc800cba50b9699ff4a0f5ca926ad1bedd670ab56658d','qKpxn1MqD2fQwd4A2WXD','ECB').split('\0')[0]

#print s.decrypt('1d985f278f6bc064677be20a1455b78caf8630b9dd0224f7c1236268d682968516c9c8b16e6dec20d5a78807d2409f986d2cde804db2baae80271de7c3917f3e6ca761eeb55f0ebcc10997f1622ec6b8b92970328a3366afff8a4234174acc4c07a7c6e59e88d4a01f614add9c83c3de50188e326073ec8999d2128362ee2ddc3c03348e6a2bc7968d4bd85320133c06e9535ebafe8670d94b21a3b499c33e9cfe46297749e14fc3f6bfe76813762692aa988a77d2f218ab6b86d51586f0e5647a35f660b20168abdee8e45b71c5e2a5aead8815424a4ce0946a5ebb392bbe2d15963ba35ec7035dfa7c5dd1609df67afa440a54ba4ce0bdf41242e258368067a428ea0d8b834e163ada91349eb9788b19b12b580c79141e63dab9b52d435b17da0f7c4b8e4fbc1243bfb3fdf5d13805f548ed6e44ef0cc747cbfc38251341bcd82cdc0d7e1b73c8898aa656dee8525191c392581fb68e94dbee19e5465d7b1bd3278fd200a7e4ac06f6c5dcadb4eccaac06766994a76cd2883cdafb31173c438346122615cf0dc0ec25449478ad021a7c62997f1a9ebd42e0a0d4cdc066dc91a1284d746d63523a7bbcc800cba50b9699ff4a0f5ca926ad1bedd670ab56658d','qKpxn1MqD2fQwd4A2WXD','ECB').split('\0')[0]

#&key=859e3c6610edb8515f51510e84b1b983ad08b12cd18d8624313c3e58184228a8c1216e97c7cc6365ae0fb9ac3f609742cca76f55d064722262e31991bebb579d40ac33d876e557445b7efad603e1dd8127af13242c3cbc4cc1a38be72a8b7f4ff72c3869cfd55bf20365ff5281e2a8e00e02e8245ad468adf97a902542c4258bbe3046b96320b2c3a1c821af9d3e91ac894c20be26b31cfd728c7d7be1210da2c7870f262188826d12d2ae996c0ce3740d4d2666825012e612d2f0d551f6be11& 
#param 2284d8243ff208924171771041939b3205b25e80fbf6f1c44d31d4faca771227b5f93f36b0941e61683400b8fafd8bbdff4b074a555196e862b0f7d1a18304798650bba3769354a821d7803e3adf43fea8d5d21244f56f246eaf8657cd85cf1c1e462d716711e624f818ca15639e6fe54015d94888c00bdd38b2eb775cf32e642e42d7ae6fb40962541cb1086e56da228eee5fcb9658bfa7a73f808fcafb9de062ad9d4e0f91d7449b527d4f44a197c57f6ed7ab0251003cee833f3642199041cc206bf42f13cb55aecb16a9867fdc837593b392d95bcb51886dc025fdd8ad0381333d47cc7f94cf44e0057875de99d0fbf99ad829856ba12a53d5b7e05f66067eec3b5781526a148db1c8ce7ab0eae0c55c95aa0f4d669e626623746a9f906b88a766ef21940503fdfc6771cc6d5b1522d651f2251648a40ea53e8c18701edf10a2a10c6491f6b6b3a9d93b497f70055cf64869c75f1fea8b781e0944d28f84dc5e4254c03791311343b04996e5e88874e3633336a9172326f10def64b0b61d519f06a3d772e0abbdc136b838fb74d4ae85547ebb1eb135e1797a52b7f5bc7ef1738841a9ed146f6e70b3d2d3e2cc059c6b7e4f7d784577f5264c1eb8476eb7
#response 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<jEsQ0hJTkE6MSxHV1NfVVJMX1JFRElSRUNUSU9OOjEsRkVBVFVSRURfUEhPVE9TOjEsQ09NTUVOVF9TVUJTQ1JJUFRJT046MSxDT01NRU5UX1NVQlNDUklQVElPTl9TRVRUSU5HOjEsUElDQVNBX01BQzoxLEFQSV9BVVRPX0FDQ09VTlRTOjEsRk9DVVNfR1JPVVBfQUNMOjEsUEhPVE9TVFJFQU06MSxCQUNLRU5EX0FDTDoxLEFEVk7yuUwSPmi<Q0VEX1NFQVJDSDoxLEZBQ0VfU0VBUkNIOjEsQ0FNRVJBX1NFQVJDSDoxLE5PVElGSUNBVElPTjoxLFBJWEVMQVRFRF9QUkVWSUVXOjEsVFJBTlNQQVJFTlRfUElYRUxBVEVEX1BSRVZJRVc6MSxORVdfU0VUVElOR1NfUEFHRToxLFZJRVdfU1RBUlJFUlM6MSxGUl9GT0NVU19NRVJHRToxLEdBTExFUllfQ09NTUVOVFM6MSxDT01NRU5UX0FCVVNFX0JMT0NLSU5HOjEsRkFWT1JJVEVfTk9USUZJQ0FUSU9OOjEsSU1BR0VfT05MWV9MSU5LOjEsUkVDRU5UX1BIT1RPU19TTElERVNIT1c6MSxIRUFSVDoxLFNNQUxMRVJfSU1BR0U6MSxGQVNUX1NMSURFU0hPVzoxLFZJRVdfQ09OVEFDVFM6MSxDT0xMQUJPUkFUSVZFX0FMQlVNUzoxLFBSSU5UX01BUkBNgBXfFVFBMQUN7yuUwSPmi<jEsUFJJTlRfTUFSS0VUUExBQ0VfUkVQTEFDRU1FTlQ6MSxWSUVXX0NPVU5UOjEsUE9TVF9UTzoxLEdBUExVUzoxLFBJQ0FTQV9QUk9NTzoxLFBST0RVQ1RJT046MSxOT1NDUklQVDoxLFVOTElTVEVEX0dBTExFUlk6MSxHQV9UUkFDS0lORzoxLFVOTElNSVRFRF9HQUxMRVJZOjEsUElDTklLX0VESVQ6MSxNSUNST1NDT1BFX1pPT006MSxGUl9WMjoxLEZBVk9SSVRFX1NVR0dFU1RJT046MSxGQVZPUklURV9VUERBVEU6MSxNRVJHRURfUFJPRklMRVNfU09GVExBVU5DSDoxLE1FUkdFRF9QUk9GSUxFUzoxLE1FUkdFRF9QUk9GSUxFU19BU1lOQzoxLE5FV19GUl9VSToxLEdBUExVU19VTk1FUkdFRF9TT0NJQUxJWkFUSU9OOjEsT1BUT1VUX0FDTF9OT1RJRklDQVRJT046MSxIVFRQU19WSVNJQklMSVRZOjEsREVGQVVMVF9IVFRQUzoxLEVYVEVOREVEX0VYSUY6MSxPTkVQSUNLOjEsUEVSX0FMQlVNX0dFT19WSVNJQklMSVRZOjEsU0hBUkVCT1hfVklTSUJJTElUWToxLEFVVE9fRE9XTlNJWkU6MSxCVUxLX0FMQlVNX0VESVRPUl9WSVNJQklMSVRZOjEsUFJPRklMRV9OQU1FX0NIRUNLOjEsQ09MTEFCT1JBVElWRV9OQU1FVEFHUzoxLE5PVF9GT1VORF80MDQ6MSxSRURJUkVDVF9UT19QTFVTOjEsRElTQUJMRV9QT1NUX1NFUlZMRVRfREVMRVRFX1NIQVBFUzoxLERJU0FCTEVfUE9TVF9TRVJWTEVUX0RFTEVURV9OQU1FVEFHUzoxLExPQ0FUSU9OX0VYVFJBQ1RJT05fU0VSVklDRToxLFJFRElSRUNUX0dQTFVTX1ZJRVdFUlNfUEVSQ0VOVEFHRV9BTEw6MSxSRURJUkVDVF9HUExVU19WSUVXRVJTX1BFUkNFTlRBR0VfUFVCTElDOjEsUkVESVJFQ1RfR1BMVVNfT1dORVJTOjEsUkVESVJFQ1RfR1BMVVNfU0VBUkNIOjEsUkVESVJFQ1RfR1BMVVNfTk9fUkVUVVJOOjEsUkVESVJFQ1RfR1BMVVNfQ07yuUwSPmi<T05JQ0FMX1BVQkxJQzoxLFJFRElSRUNUX0dQTFVTX0NBTk9OSUNBTF9VTkxJU1RFRDoxLENMSUVOVF9BU1lOQ19USFVNQk5BSUxTX1BFUkNFTlRBR0U6MSxQT1NUX0hBTkRMRVJfQ1JFQVRFX1NVQkpFQ1RfVklTSUJJTElUWToxLENMSUVOVF9BU1lOQ19GQUNFX0RFVEVDVF9QRVJDRU5UQUd7yuUwSPmi<jEsR0RBVEFfRVZFTlRTX1ZJU0lCSUxJVFk6MSxERVBSRUNBVEVEX0dBSUFfTUlOVFNfUEVSQ0VOVEFHRToxLEdBSUFfTUlOVFNfRU5BQkxFRDoxLEFMQlVNX0NPVkVSX0RJQUxPRzoxLEFVVE9fU0VHTUVOVF9DT1BZX1BIT1RPUzoxLEdBTExFUllfU0hJRlRfUEVSQ0VOVEFHRV9FTkFCTEVEOjEsQVVUT19VTkxJU1RFRF9BTEJVTV9PTl9FTUFJTF9TSEFSRToxLEFQSV9TTUFMTF9JVV9BVVRPX1dSQVBQSU5HX1ZJU0lCSUxJVFk6MSxBUElfRklMVEVSX0lVX0FDVElWRV9BTEJVTToxLEFQSV9GSUxURVJfR0RSSVZFX0FMQlVNX0VOQUJMRUQ6MSxJVV9SRUJSQU5EX0VOQUJMRUQ6MSxTV0ZfU1RBVElDX1NFUlZJTkdfVklTSUJJTElUWToxLEVESVRfSU5fR09PR0xFX1BMVVM6MSxVU0VSX1NFVFRJTkdTX0ZJTFRFUl9DQUNIRToxLERJU0FCTEVfUE9QVUxBUl9DQU5PTklDQUxfUEFHRVM6MX07PC9zY3JpcHQ+CjxzY3JpcHQ+CnZhciBwd2EgPSB7fTsKcHdhLnBhdGhzID0gewpzZWxlY3RlZFBob3RvczogJy9saC9zZWxlY3RlZFBob3Rvcz90b2s9JywKY29BNgBXfbWVudEFidXNlOiAnXHgyRmxoXHgyRmNvbW1lbnRBYnVzZT90b2s9JywKc3RhdGljUm9vdDogJ2h0dHBzOi8vd3d3LmdzdGF0aWMuY29BNgBXfL3B3YS9zL3YvbGlnaHRob3VzZWZlXzI0MS4wMS8nLApzY3JpcHQ6ICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9wd2Evcy92L2xpZ2h0aG91c2VmZV8yNDEuMDEvc2NyaXB0LycsCnN0YXRpY2lBNgBXfYWdlcGF0aDogJ2h0dHBzOi8vd3d3LmdzdGF0aWMuY29BNgBXfL3B3YS9zL3YvbGlnaHRob3VzZWZlXzI0MS4wMS9pbWcvJywKdHJhbnNwYXJlbnRnaWY6ICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9wd2Evcy92L2xpZ2h0aG91c2VmZV8yNDEuMDEvaW1nL3RyYW5zcGFyZW50LmdpZ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]YmFja2dyb3VuZC1jb2xvcjojMmQyZDJkO2JhY2BNgBXfncm91bmQBNgBXfaW1hZ2U6bm9uZTBNgBXffYmFja2dyb3VuZC1pbWFnZTpub25lO2JhY2BNgBXfncm91bmQBNgBXfcG9zaXRpb246MCABNgBXfMTM4cHg7YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0LXg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzAwMDBNgBXfmb250LXNpemU6MjRweDBNgBXfoZWlnaHQ6MjlweDBNgBXffaGVpZ2h0OjMwcHg7b3BhY2l0eToxO2ZpbHRlcjphbHBoYShvcGFjaXR5PTEwMCk7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7d2lkdGg6MTAwJTBNgBXf6LWluZGV4Ojk5MH0jZ2J4M3BNgBXfsZWZ0OjB9I2dieDVzAV16u6]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]Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTpibG9jazBNgBXf0ZXh0LWRlY29yYXRpb246bm9uZSAhaW1wb3J0YW50fXNwYW4jZ2JnNixzcGFuI2diZzVzAV16u6]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]bGVmdDo1cHg7Ym9yZGVyOjA7aGVpZ2h0OjI0cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjFweDBNgBXf3aWR0aDoyNHB4fS5nYnRvICNnYmk0aSwuZ2J0byAjZ2JpNGlke3RvcDozcHh9LmdiaTRwe2Rpc3BsYXk6YmxvY2s7d2lkdGg6MjRweH0jZ2JpNGlke2JhY2BNgBXfncm91bmQBNgBXfcG9zaXRpb246LTQ0cHggLTEwMXB4fSNnYm1waWVzAV16u6]YmFja2dyb3VuZC1wb3NpdGlvbjowIDB9I2dibXBpLCNnYm1waWVzAV16u6]Ym9yZGVyOm5vbmU7ZGlzcGxheTppbmxpbmUBNgBXfYmxvY2s7aGVpZ2h0OjQ4cHg7d2lkdGg6NDhweH0jZ2JBNgBXfcGl3e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2xpbmUBNgBXfaGVpZ2h0OjlweDBNgBXfwYWRkaW5nLWxlZnQ6MjBweDBNgBXfBNgBXfYXJnaW4BNgBXfdG9wOjEwcHg7cG9zaXRpb246cmVsYXRpdmV9I2dibXBpLCNnYm1waWQsI2dibXBpd3sqZGlzcGxheTppbmxpbmV9I2diZzV7Zm9udC1zaXplOjB9I2diZ3M1e3BhZGRpbmc6NXB4ICFpbXBvcnRhbnR9LmdidG8gI2diZ3M1e3BhZGRpbmc6N3B4IDVweCA2cHggIWlBNgBXfcG9ydGFudH0jZ2JpNXBNgBXfiYWNrZ3JvdW5kOnVybCgvL3NzbC5nc3RhdGljLmNvbS9nYi9pbWFnZXMvYl84ZDVhZmMwOS5wbmcpO19iYWNrZ3JvdW5kOnVybCgvL3NzbC5nc3RhdGljLmNvbS9nYi9pbWFnZXMvYjhfMzYxNWQ2NGQucG5nKTBNgBXfiYWNrZ3JvdW5kLXBvc2l0aW9uOjAgMDBNgBXfkaXNwbGF5OmJsb2NrO2ZvbnQBNgBXfc2l6ZTowO2hlaWdodDoxN3B4O3dpZHRoOjE2cHh9LmdidG8gI2diaTV7YmFja2dyb3VuZC1wb3NpdGlvbjoBNgBXfNnB4IC0yMnB4fS5nYm4gLmdibXQsLmdibiAuZ2JBNgBXfdDp2aXNpdGVkLC5nYm5kIC5nYm10LC5nYm5kIC5nYm10OnZpc2l0ZWVzAV16u6]Y29sb3I6I2RkOGUyNyAhaW1wb3J0YW50fS5nYmYgLmdibXQsLmdiZiAuZ2JBNgBXfdDp2aXNpdGVke2NvbG9yOiM5MDAgIWlBNgBXfcG9ydGFudH0uZ2JBNgBXfdCwuZ2JBNgBXfbDEsLmdibWxiLC5nYm10OnZpc2l0ZWQsLmdibWwxOnZpc2l0ZWQsLmdibWxiOnZpc2l0ZWVzAV16u6]Y29sb3I6IzM2YyAhaW1wb3J0YW50O3RleHQBNgBXfZGVjb3JhdGlvbjpub25lICFpbXBvcnRhbnR9LmdibXQsLmdibXQ6dmlzaXRlZHBNgBXfkaXNwbGF5OmJsb2NrfS5nYm1sMSwuZ2JBNgBXfbGIsLmdibWwxOnZpc2l0ZWQsLmdibWxiOnZpc2l0ZWVzAV16u6]ZGlzcGxheTppbmxpbmUBNgBXfYmxvY2s7bWFyZ2luOjAgMTBweH0uZ2JBNgBXfbDEsLmdibWxiLC5nYm1sMTp2aXNpdGVkLC5nYm1sYjp2aXNpdGVkeypkaXNwbGF5OmlubGluZX0uZ2JBNgBXfbDEsLmdibWwxOnZpc2l0ZWVzAV16u6]cGFkZGluZzowIDEwcHh9LmdibWwxLWh2ciwuZ2JBNgBXfbDE6Zm9jdXN7b3V0bGluZTpub25lO3RleHQBNgBXfZGVjb3JhdGlvbjp1bmRlcmxpbmUgIWlBNgBXfcG9ydGFudH0jZ2JwbSAuZ2JBNgBXfbDF7ZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7cGFkZGluZzowO3doaXRlLXNwYWNlOm5vd3JhcH0uZ2JBNgBXfbGIsLmdibWxiOnZpc2l0ZWVzAV16u6]bGluZS1oZWlnaHQ6MjdweH0uZ2JBNgBXfbGIBNgBXfaHZyLC5nYm1sYjpmb2N1c3BNgBXfvdXRsaW5lOm5vbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSAhaW1wb3J0YW50fS5nYm1sYnd7Y29sb3I6I2NjYzBNgBXfBNgBXfYXJnaW46MCAxMHB4fS5nYm10e3BhZGRpbmc6MCAyMHB4fS5nYm10OmhvdmVyLC5nYm10OmZvY3Vze2JhY2BNgBXfncm91bmQ6I2VlZTBNgBXfjdXJzb3I6cG9pbnRlcjBNgBXfvdXRsaW5lOjAgc29saWQgYmxhY2s7dGV4dC1kZWNvcmF0aW9uOm5vbmUgIWlBNgBXfcG9ydGFudH0uZ2JBNgBXfMGwsLmdibTBsOnZpc2l0ZWVzAV16u6]Y29sb3I6IzAwMCAhaW1wb3J0YW50O2ZvbnQBNgBXfd2VpZ2h0OmJvbGR9LmdibWh7Ym9yZGVyLXRvcDoxcHggc29saWQgI2JlYmViZTBNgBXfmb250LXNpemU6MDBNgBXfBNgBXfYXJnaW46MTBweCAwfSNnYmQ0IC5nYm1je2JhY2BNgBXfncm91bmQ6I2Y1ZjVmNTBNgBXfwYWRkaW5nLXRvcDowfSNnYmQ0IC5nYnNiaWM6Oi13ZWJraXQBNgBXfc2Nyb2xsYmFyLXRyYWNrOnZlcnRpY2Fse2JhY2BNgBXfncm91bmQBNgBXfY29sb3I6I2Y1ZjVmNTBNgBXfBNgBXfYXJnaW4BNgBXfdG9wOjJweH0jZ2JBNgBXfcGR2e2JhY2BNgBXfncm91bmQ6I2ZmZjBNgBXfib3JkZXIBNgBXfYm90dG9BNgBXfOjFweCBzb2xpZCAjYmViZWJlOy1BNgBXfb3oBNgBXfYm94LXNoYWRvdzowIDJweCA0cHggcmdiYSgwLDAsMCwuMTIpOy1vLWJveC1zaGFkb3c6MCAycHggNHB4IHJnYmEoMCwwLDAsLjEyKTsBNgBXfd2Via2l0LWJveC1zaGFkb3c6MCAycHggNHB4IHJnYmEoMCwwLDAsLjEyKTBNgBXfib3gBNgBXfc2hhZG93OjAgMnB4IDRweCByZ2JhKDAsMCwwLC4xMik7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxfSNnYmQ0IC5nYm1oe21hcmdpbjowfS5nYm10Y3BNgBXfwYWRkaW5nOjA7bWFyZ2luOjA7bGluZS1oZWlnaHQ6MjdweH0uR0JNQ0M6bGFzdC1jaGlsZDphZnRlciwjR0JNUEFMOmxhc3QBNgBXfY2hpbGQ6YWZ0ZXJ7Y29udGVudDonXDBBXDBBJzBNgBXf3aGl0ZS1zcGFjZTpwcmU7cG9zaXRpb246YWJzb2x1dGV9I2dibXBzeyp6b29BNgBXfOjF9I2diZDQgLmdicGMsI2dibXBhcyAuZ2JBNgBXfdHBNgBXfsaW5lLWhlaWdodDoxN3B4fSNnYmQ0IC5nYnBncyAuZ2JBNgBXfdGN7bGluZS1oZWlnaHQ6MjdweH0jZ2JkNCAuZ2JBNgBXfdGN7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2JlYmViZX0jZ2JkNCAuZ2JwY3BNgBXfkaXNwbGF5OmlubGluZS1ibG9jazBNgBXfBNgBXfYXJnaW46MTZweCAwIDEwcHg7cGFkZGluZy1yaWdodDo1MHB4O3ZlcnRpY2FsLWFsaWduOnRvcH0jZ2JkNCAuZ2JwY3sqZGlzcGxheTppbmxpbmV9LmdicGMgLmdicHMsLmdicGMgLmdicHMye2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjAgMjBweH0jZ2JBNgBXfcGxwLmdicHN7bWFyZ2luOjAgMTBweH0uZ2JwYyAuZ2Jwc3BNgBXfjb2xvcjojMDAwO2ZvbnQBNgBXfd2VpZ2h0OmJvbGR9LmdicGMgLmdicGVzAV16u6]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?%%YS5sZW5ndGg7YysrKWlmKGMgaW4gYSYmYVBNgBXfjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LFg9ZnVuY3Rpb24oYSxiKXBNgBXfyZXR1cm4BNgBXfMT09JGIoYSxXKT8ocihFcnJvcihXKyJfIiBNgBXfiKSwidXAiLCJjYWEiKSwhMSk6ITB9LGJjPWZ1bmN0aW9uKGEsYil7WChbMSwyXSwiciIpJiYoVVBNgBXfhXT1VW2FdfHxbXSxVW2FdLnB1c2goYiksMj09VyYmd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXBNgBXfiKGFjKGEpKX0sMCkpfSxjYz1mdW5jdGlvbihhLGIsYyl7aWYoWChbMV0sIm5hcCIpJiZjKXBNgBXfmb3IodmFyIGQ9MDBNgBXfkPGMubGVuZ3RoO2QrKylZYlBNgBXfjW2RdXT0hMDBNgBXfoLnVwLnNwbChhLGIsIm5hcCIsYyl9fSxkYz0KZnVuY3Rpb24oYSxiLGMpe2lmKFgoWzFdLCJhb3AiKSYmYyl7aWYoVilmb3IodmFyIGQgaW4gVilWW2RdPVZbZF0mJi0xIT0kYihjLGQpO2Vsc2UgZm9yKFY9e30sZD0wO2Q8Yy5sZW5ndGg7ZCsrKVZbY1BNgBXfkXV09ITA7aC51cC5zcGwoYSxiLCJhb3AiLGMpfX0sZWM9ZnVuY3Rpb24oKXBNgBXf0cnl7aWYoVz0yLCFaYil7WmI9ITA7Zm9yKHZhciBhIGluIFUpZm9yKHZhciBiPVVbYV0sYz0wO2eqdAEJV%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GkgY2xhc3M9Z2J0PjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLnFzKHRoaXMpO2diYXIubG9nZ2VyLmlsKDEse3Q6Nzh9KTsgY2xhc3M9Z2J6dCBpZD1nYl83OCBocmVmPSJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS8/aGw9ZW4mdGFiPXE4Ij48c3BhbiBjbGFzcz1nYnRiMj48L3NwYW4+PHNwYW4gY2xhc3M9Z2J0cz5QbGF5PC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz1nYnQ+PGEgdGFyZ2V0PV9ibGFuayBvbmNsaWNrPWdiYXIucXModGhpcyk7Z2Jhci5sb2dnZXIuaWwoMSx7dDozNn0pOyBjbGFzcz1nYnp0IGlkPWdiXzM2IGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29BNgBXfLz90YWI9cTEiPjxzcGFuIGNsYXNzPWdidGIyPjwvc3Bhbj48c3BhbiBjbGFzcz1nYnRzPllvdVR1YmU8L3NwYW4+PC9hPjwvbGk+PGxpIGNsYXNzPWdidD48YSB0YXJnZXQ9X2JsYW5rIG9uY2xpY2s9Z2Jhci5sb2dnZXIuaWwoMSx7dDo1fSk7IGNsYXNzPWdienQgaWQ9Z2JfNSBocmVmPSJodHRwczovL25ld3MuZ29vZ2xlLmNhL253c2hwP2hsPWVuJnRhYj1xbiI+PHNwYW4gY2xhc3M9Z2J0YjI+PC9zcGFuPjxzcGFuIGNsYXNzPWdidHM+TmV3czwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9Z2J0PjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLmxvZ2dlci5pbCgxLHBNgBXf0OjI88DAw#Sk7IGNsYXNzPWdienQgaWQ9Z2JfMjMgaHJlZj0iaHR0cHM6Ly9BNgBXfYWlsLmdvb2dsZS5jb20vbWFpbC8/dGFiPXFBNgBXfIj48c3BhbiBjbGFzcz1nYnRiMj48L3NwYW4+PHNwYW4gY2xhc3M9Z2J0cz5HbWFpbDwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9Z2J0PjxhIGNsYXNzPWdiZ3QgaWQ9Z2J6dG0gaHJlZj0iaHR0cDovL3d3dy5nb29nbGUuY2EvaW50bC9lbi9vcHRpb25zLyIgb25jbGljaz0iZ2Jhci50ZyhldmVudCx0aGlzKSIgYXJpYS1oYXNwb3B1cD10cnVlIGFyaWEBNgBXfb3ducz1nYmQ+PHNwYW4gY2xhc3M9Z2J0YjI+PC9zcGFuPjxzcGFuIGlkPWdienRBNgBXfcyBjbGFzcz0iZ2J0cyBnYnRzYSI+PHNwYW4gaWQ9Z2J6dG1zMT5Nb3JlPC9zcGFuPjxzcGFuIGNsYXNzPWdibWE+PC9zcGFuPjwvc3Bhbj48L2E+PGRpdiBjbGFzcz1nYm0gaWQ9Z2JkIGFyaWEBNgBXfb3duZXI9Z2J6dG0+PGRpdiBpZD1nYm1BNgBXfYiBjbGFzcz0iZ2JBNgBXfYyBnYnNiIGdic2JpcyI+PG9sIGlkPWdibW0gY2xhc3M9ImdibWNjIGdic2JpYyI+PGxpIGNsYXNzPWdibXRjPjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLmxvZ2dlci5pbCgxLHBNgBXf0OjI1fSk7IGNsYXNzPWdibXQgaWQ9Z2JfMjUgaHJlZj0iaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29BNgBXfLz90YWI9cW8iPkRyaXZlPC9hPjwvbGk+PGxpIGNsYXNzPWdibXRjPjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLmxvZ2dlci5pbCgxLHBNgBXf0OjI0fSk7IGNsYXNzPWdibXQgaWQ9Z2JfMjQgaHJlZj0iaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jYWxlbmRhcj90YWI9cWMiPkNhbGVuZGFyPC9hPjwvbGk+PGxpIGNsYXNzPWdibXRjPjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLnFzKHRoaXMpO2diYXIubG9nZ2VyLmlsKDEse3Q6NTF9KTsgY2xhc3M9Z2JBNgBXfdCBpZD1nYl81MSBocmVmPSJodHRwczovL3RyYW5zbGF0ZS5nb29nbGUuY2EvP2hsPWVuJnRhYj1xVCI+VHJhbnNsYXRlPC9hPjwvbGk+PGxpIGNsYXNzPWdibXRjPjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLnFzKHRoaXMpO2diYXIubG9nZ2VyLmlsKDEse3Q6MTB9KTsgY2xhc3M9Z2JBNgBXfdCBpZD1nYl8xMCBocmVmPSJodHRwOi8vYm9va3MuZ29vZ2xlLmNhL2Jrc2hwP2hsPWVuJnRhYj1xcCI+Qm9va3eqdAEJV%L2E+PC9saT48bGkgY2xhc3M9Z2JBNgBXfdGM+PGEgdGFyZ2V0PV9ibGFuayBvbmNsaWNrPWdiYXIubG9nZ2VyLmlsKDEse3Q6MzB9KTsgY2xhc3M9Z2JBNgBXfdCBpZD1nYl8zMCBocmVmPSJodHRwczovL3d3dy5ibG9nZ2VyLmNvbS8/dGFiPXFqIj5CbG9nZ2VyPC9hPjwvbGk+PGxpIGNsYXNzPWdibXRjPjxhIHRhcmdldD1fYmxhbmsgb25jbGljaz1nYmFyLnFzKHRoaXMpO2diYXIubG9nZ2VyLmlsKDEse3Q6Mjd9KTsgY2xhc3M9Z2JBNgBXfdCBpZD1nYl8yNyBocmVmPSJodHRwczovL3d3dy5nb29nbGUuY2EvZmluYW5jZT90YWI9cWUiPkZpbmFuY2U8L2E+PC9saT48bGkgY2xhc3M9Z2JBNgBXfdGM+PGEgb25jbGljaz1nYmFyLmxvZ2dlci5pbCgxLHBNgBXf0OjMxfSk7IGNsYXNzPSJnYm10IGdicDEgZ2JBNgBXfMGwiIGlkPWdiXzMxIGhyZWY9Imh0dHBzOi8vcGx1cy5nb29nbGUuY29BNgBXfL3Bob3Rvcz90YWI9cXEiPlBob3RvczwvYT48L2xpPjxsaSBjbGFzcz1nYm10Yz48YSB0YXJnZXQ9X2JsYW5rIG9uY2xpY2s9Z2Jhci5xcyh0aGlzKTBNgBXfnYmFyLmxvZ2dlci5pbCgxLHBNgBXf0OjEyfSk7IGNsYXNzPWdibXQgaWQ9Z2JfMTIgaHJlZj0iaHR0cDovL3ZpZGVvLmdvb2dsZS5jYS8/aGw9ZW4mdGFiPXF2Ij5WaWRlb3eqdAEJV%L2E+PC9saT48bGkgY2xhc3M9Z2JBNgBXfdGM+PGRpdiBjbGFzcz0iZ2JBNgBXfdCBnYm1oIj48L2Rpdj48L2xpPjxsaSBjbGFzcz1nYm10Yz48YSB0YXJnZXQ9X2JsYW5rIG9uY2xpY2s9Z2Jhci5sb2dnZXIuaWwoMSx7dDo2Nn0pOyBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jYS9pbnRsL2VuL29wdGlvbnMvIiBjbGFzcz1nYm10PkV2ZW4gbW9yZSAmcmFxdW87PC9hPjwvbGk+PC9vbD48ZGl2IGNsYXNzPWdic2J0PjwvZGl2PjxkaXYgY2xhc3M9Z2JzYmI+PC9kaXY+PC9kaXY+PC9kaXY+PC9saT48L29sPjwvZGl2PjxkaXYgaWQ9Z2JnPjxoMiBjbGFzcz1nYnh4PkFjY291bnQgT3B0aW9uczwvaDI+PHNwYW4gY2xhc3M9Z2J0Y2I+PC9zcGFuPjxvbCBjbGFzcz1nYnRjPjxsaSBjbGFzcz1nYnQ+PGEgdGFyZ2V0PV90b3AgaHJlZj0iaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hY2NvdW50cy9TZXJ2aWNlTG9naW4/aGw9ZW5fVVMmY29udGludWU9aHR0cHMlM0ElMkYlMkZwaWNhc2F3ZWIuZ29vZ2xlLmNvbSUyRmxoJTJGbG9naW4lM0Zjb250aW51ZSUzRGh0dHBzJTI1M0ElMjUyRiUyNTJGcGljYXNhd2ViLmdvb2dsZS5jb20lMjUyRmxoJTI1MkZwaG90byUyNTJGNU9EVklWN2lCSEhOT2lyUzdKbnpWMF94aWMwMjNrVm1Qc1MzeGQ5TW55RSZzZXJ2aWNlPWxoMiZsdG1wbD1ncCZwYXNzaXZlPXRydWUiIG9uY2xpY2s9ImdiYXIubG9nZ2VyLmlsKDkse2w6J2knfSkiIGlkPWdiXzcwIGNsYXNzPWdiZ3Q+PHNwYW4gY2xhc3M9Z2J0YjI+PC9zcGFuPjxzcGFuIGlkPWdiZ3M0IGNsYXNzPWdidHM+PHNwYW4gaWQ9Z2JpNHMxPlNpZ24gaW48L3NwYW4+PC9zcGFuPjwvYT48L2xpPjxsaSBjbGFzcz0iZ2J0IGdidGIiPjxzcGFuIGNsYXNzPWdidHM+PC9zcGFuPjwvbGk+PGxpIGNsYXNzPWdidD48YSBjbGFzcz1nYmd0IGlkPWdiZzUgaHJlZj0iaHR0cDovL3d3dy5nb29nbGUuY2EvcHJlZmVyZW5jZXM/aGw9ZW4iIHRpdGxlPSJPcHRpb25zIiBvbmNsaWNrPSJnYmFyLnRnKGV2ZW50LHRoaXMpIiBhcmlhLWhhc3BvcHVwPXRydWUgYXJpYS1vd25zPWdiZDU+PHNwYW4gY2xhc3M9Z2J0YjI+PC9zcGFuPjxzcGFuIGlkPWdiZ3M1IGNsYXNzPWdidHM+PHNwYW4gaWQ9Z2JpNT48L3NwYW4+PC9zcGFuPjwvYT48ZGl2IGNsYXNzPWdibSBpZD1nYmQ1IGFyaWEBNgBXfb3duZXI9Z2JnNT48ZGl2IGNsYXNzPWdibWM+PG9sIGlkPWdib20gY2xhc3M9Z2JBNgBXfY2M+PGxpIGNsYXNzPSJnYmBNgBXfjIGdibXRjIj48YSB0YXJnZXQ9X2JsYW5rICBjbGFzcz1nYm10IGhyZWY9Imh0dHA6Ly9waWNhc2EuZ29vZ2xlLmNvbS9zdXBwb3J0P2hsPWVuX1VTIj5IZWxwPC9hPjwvbGk+PGxpIGNsYXNzPWdibXRjPjxkaXYgY2xhc3M9ImdibXQgZ2JBNgBXfaCI+PC9kaXY+PC9saT48bGkgY2xhc3M9ImdiZiBnYm10YyI+PGEgIGNsYXNzPWdibXQgaHJlZj0iaHR0cDovL3BpY2FzYS5nb29nbGUuY29BNgBXfL3N1cHBvcnQvYmluL2Fuc3dlci5weT9hbnN3ZXI9MTQbYnosG?jIzJmhsPWVuX1VTIj5OZXcgRmVhdHVyZXeqdAEJV%L2E+PC9saT48L29sPjwvZGl2PjwvZGl2PjwvbGk+PC9vbD48L2Rpdj48L2Rpdj48ZGl2IGlkPWdieDM+PC9kaXY+PGRpdiBpZD1nYng0PjwvZGl2PjxzY3JpcHQ+d2luZG93LmdiYXImJmdiYXIuZWxwJiZnYmFyLmVscCgpPC9zY3JpcHQ+PC9kaXY+CjxzY3JpcHQ+CmlmICh3aW5kb3cucHdhICYmIHB3YS5pbml0VGlBNgBXfZXIpIHsKcHdhLmluaXRUaW1lcihfUCwKW3BNgBXfuOidyZXF1ZXN0Jyx0OjM5NyxjOlBNgBXf7bjonZmlsdGVyJyx0OjE1MCxjOlBNgBXf7bjonVXNlckNvbnRleHRGaWx0ZXInLHQ6NyxjOlBNgBXf7bjonZ2V0VmVyaWZpZWRTZXNzaW9uQ29va2llJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonZ2V0U2VydmljZUNvb2BNgBXfpZScsdDowLGM6W10sbTpbXX0sXSxBNgBXfOlBNgBXf7bjonbG9va3VwVXNlckJ5SWQnLHQ6J0dBSUEnLG06N30sXX0se246J01vYmlsZVJlZGlyZWN0RmlsdGVyJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonQXV0aG9yaXphdGlvbkVuZm9yY2VBNgBXfZW50RmlsdGVyJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonQXBwbGljYXRpb25Db250ZXh0RmlsdGVyJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonR2FpYU1pbnRGaWx0ZXInLHQ6MCxjOlBNgBXfdLG06W119LHBNgBXfuOidHYWlhQ2FjaGVDb3JyZWN0aW9uRmlsdGVyJyx0OjE4LGM6W10sbTpbXX0se246J1BsdXNQYWdlQXV0aG9yaXphdGlvbkZpbHRlcicsdDoyLGM6W10sbTpbXX0se246J1JlcXVlc3RJbmZvRmlsdGVyJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonVXNlclNldHRpbmdzRmlsdGVyJyx0OjExNSxjOlBNgBXfdLG06W119LHBNgBXfuOidBbGJ1bUhhc2hUb2BNgBXflbkNvZGVjJyx0OjAsYzpbXSxBNgBXfOlBNgBXfdfSx7bjonR3VwaVRva2VuQ29kZWMnLHQ6MyxjOlBNgBXfdLG06W3BNgBXfuOidsb29rdXBVc2VyQnlJZCcsdDonR0FJQScsbTo88DAw#<DVGRjk4RDM5MTcxMTQzOUMzRjM1MENBRi5CNDM3NzNBMzY0MjI0MjUbYnosG?zE0MDhDRTI1NUZGNDYxOTdBRjlERTM5JmBNgBXfleT1saDEiLCJoZWlnaHQiOjE3OCwid2lkdGgiOjQyNiwidHlwZSI6ImFwcGxpY2F0aW9uL3gBNgBXfc2hvY2BNgBXf3YXZlLWZsYXNoIn0seyJ1cmwiOiJodHRwOi8vcmVkaXJlY3Rvci5nb29nbGV2aWRlby5jb20vdmlkZW9wbGF5YmFjaz9pZD0xZmJlNWVlZTRjMWVkYWE1Jml0YWc9MTgmc291cmNlPXBpY2FzYSZjbW89c2Vuc2l0aXZlX2NvbnRlbnQlM0R5ZXMmaXA9MC4wLjAuMCZpcGJpdHM9MCZleHBpcmU9MTQwMjkzMzc3MiZzcGFyYW1zPWlkLGl0YWcsc291cmNlLGlwLGlwYml0cyxleHBpcmUmc2lnbmF0dXJlPUE5RjJFMkM1MTkxMjJFMkI3NDEwRDQxRDk1QTg1MkZDRDg5RjU5Q0IuM0I0QUY4RTdFQzU3QzI5MDJFMjZCQzFBMTZGNzE1RjJFRjA1MUEbYnosG?yZrZXk9bGgxIiwiaGVpZ2h0IjoyNjgsIndpZHRoIjo2NDAsInR5cGUiOiJ2aWRlby9BNgBXfcGVnNCJ9LHsidXJsIjoiaHR0cDovL3JlZGlyZWN0b3IuZ29vZ2xldmlkZW8uY29BNgBXfL3ZpZGVvcGxheWJhY2s/aWQ9MWZiZTVlZWU0YzFlZGFhNSZpdGFnPTM0JnNvdXJjZT1waWNhc2EmY21vPXNlbnNpdGl2ZV9jb250ZW50JTNEeWVzJmlwPTAuMC4wLjAmaXBiaXRzPTAmZXhwaXJlPTE0MDI5MzM3NzImc3BhcmFBNgBXfcz1pZCxpdGFnLHNvdXJjZSxpcCxpcGJpdHMsZXhwaXJlJnNpZ25hdHVyZT0yQjgzOUY1Rjc5RTIzMTQwOTU1MTQ2RkM1MkJEQTZBQzNBRDZCODhDLjMyOUQwMUI4OEE5ODMxQUYyRDJBNTc2ODU3MjIyQ0NDRkRCODQ0OEQma2V5PWxoMSIsImhlaWdodCI6MjY4LCJ3aWR0aCI6NjQwLCJ0eXBlIjoiYXBwbGljYXRpb24veC1zaG9ja3dhdmUBNgBXfZmxhc2gifSx7InVybCI6Imh0dHA6Ly9yZWRpcmVjdG9yLmdvb2dsZXZpZGVvLmNvbS92aWRlb3BsYXliYWNrP2lkPTFmYmU1ZWVlNGMxZWRhYTUmaXRhZz0zNSZzb3VyY2U9cGljYXNhJmNBNgBXfbz1zZW5zaXRpdmVfY29udGVudCUzRHllcyZpcD0wLjAuMC4wJmlwYml0cz0wJmV4cGlyZT0xNDAyOTMzNzcyJnNwYXJhbXM9aWQsaXRhZyxzb3VyY2UsaXAsaXBiaXRzLGV4cGlyZSZzaWduYXR1cmU9QzMwOTkxQTlFQUY2QTZEN0I2RkMxNjhEQTkzOEMyN0Y1NkE3RjhGMi5FNjBEQzA0QTc2MDkyQ0JGQTU5N0IbYnosG?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 

#print s.decrypt('','qKpxn1MqD2fQwd4A2WXD','ECB').split('\0')[0] 
#movie
#print s.decrypt('2a3cdefb6a24ed40055f62eec396f88cdf6254b632093d6eefdfe879e35f061b367a61a11a364b67456390561e2666de705ad1ec1d1bc07d8f25d4b8aa780145a55da152b9e588ef7be81b450a05091d70b0bfd5faef800fafa1ce4e0acf6748089297476b25111eb29050a734d7df6c20bd3d4bdb358ffa53dcc05c7cd9311f70b0bfd5faef800fafa1ce4e0acf6748393c7c336aac36b0bc949015e1c04df5b36dae5d1e2a7d4cc0b68db80fa48f4b','2YUriYBhS3k0aOAcIfO4','ECB').split('\0')[0] 
#plugins=http://phim60s.info/player/timeslidertooltipplugin-2.swf,http://phim60s.info/player/captions.swf,http://kai.webphim.biz/kai/proxy.swf&skin=http://phim60s.info/player/skin/lightrv5/lightrv5.xml&proxy.link=https://picasaweb.google.com/htdesignz/YUk-1SMGNITTZMk-4Tl3YVk-3OaGMyRjNaV0l1WjI5k-3loyk-4GxMbU52YlM5c2FDOXk-3k-1Rk-9kwYk-8k4MVQwUlk-3TVlkk-9YVVKSVNFNVBk-1WEpUTjBwk-3WVk-5WXk-3YM2k-1wWXpBk-4U0yk-3Fk-3k-6VkJ6VXpONFpEbE5k-6bmxG#&proxy.reloader=false&abouttext=Phim60s.Info Player&aboutlink=http://phim60s.info&captions.file=&captions.color=#FFF117&captions.fontFamily=Tahoma, Geneva, sans-serif&captions.fontSize=16&captions.fontWeight=normal0&autoplay=true&repeat=list&autostart=true&volume=100
#k='6861636B656462797068696D736F742E636F6D'#s.decrypt('6861636B656462797068696D736F742E636F6D','XHKSZ69Rw2FGkCsPrKgS','ECB')
#print k
print s.decrypt('55a54f1515fbaadc3b2f84c944be801e0a81b7889d4d3f0822bf489125bccdb5c9c9f50430b6511bf515f9e884b14a3fc272460faf8db8cb61a888b902febd317ac42fc2192fe40f3ffb6bed48e425194796b175671f571f8a26a89052316371b813fae579ce8191b3dbc9b80b04dbc4dfb3524475ddd3c9314f6127834e104a1c995f9bba21b8af7cae898c90f9093b340ea410f7b7d609ac81a41f6adc917d0265165051e99971ef6c067590d526a7e07b18d94420f8dbe1999f2e1b8edccb137d83ce13d43d16e4934535ef53b46f9abab15e5e96019beadfc37b6d1a59178f76ebb98bd2370c17efe64f23d622bbe6f83fc336e386f7ebb2a4a22c8f91f4','hackedbyphimsot.com','ECB')

#print s.decrypt('5db00a5b83a1e3fa8247a89567084197b6c365e70eaaea191b2cd27c31517fb6aa303e286fa85791d24015352b5fca01','mniqJTqBU8Z3KQUejSoM','ECB')
